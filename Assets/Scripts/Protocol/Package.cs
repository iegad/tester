// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: package.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Base {

  /// <summary>Holder for reflection information generated from package.proto</summary>
  public static partial class PackageReflection {

    #region Descriptor
    /// <summary>File descriptor for package.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PackageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1wYWNrYWdlLnByb3RvEgRiYXNlIrMBCgdQYWNrYWdlEgsKA1BJRBgBIAEo",
            "BRILCgNNSUQYAiABKAUSDAoERGF0YRgDIAEoDBISCgpJZGVtcG90ZW50GAQg",
            "ASgDEg4KBlRvTm9kZRgFIAEoCRIPCgdNb3VudElEGAYgASgJEhMKC1VzZXJB",
            "ZGRyZXNzGAcgASgJEg4KBlVzZXJJRBgIIAEoAxIVCg1Gcm9tU2VydmljZUlE",
            "GAkgASgJEg8KB1RvVXNlcnMYCiADKAMqPAoJUGFja2FnZUlEEhUKEVBhY2th",
            "Z2VJRF9JbnZhbGlkEAASGAoUUGFja2FnZUlEX0lkZW1wb3RlbnQQAUIFWgMv",
            "cGJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Base.PackageID), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Base.Package), global::Base.Package.Parser, new[]{ "PID", "MID", "Data", "Idempotent", "ToNode", "MountID", "UserAddress", "UserID", "FromServiceID", "ToUsers" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 基础包ID, 0 ~ 100
  /// </summary>
  public enum PackageID {
    [pbr::OriginalName("PackageID_Invalid")] Invalid = 0,
    [pbr::OriginalName("PackageID_Idempotent")] Idempotent = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Package : pb::IMessage<Package>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Package> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Base.PackageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package(Package other) : this() {
      pID_ = other.pID_;
      mID_ = other.mID_;
      data_ = other.data_;
      idempotent_ = other.idempotent_;
      toNode_ = other.toNode_;
      mountID_ = other.mountID_;
      userAddress_ = other.userAddress_;
      userID_ = other.userID_;
      fromServiceID_ = other.fromServiceID_;
      toUsers_ = other.toUsers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package Clone() {
      return new Package(this);
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 1;
    private int pID_;
    /// <summary>
    /// 包ID, 由cerberus解析
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PID {
      get { return pID_; }
      set {
        pID_ = value;
      }
    }

    /// <summary>Field number for the "MID" field.</summary>
    public const int MIDFieldNumber = 2;
    private int mID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MID {
      get { return mID_; }
      set {
        mID_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// 消息数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Idempotent" field.</summary>
    public const int IdempotentFieldNumber = 4;
    private long idempotent_;
    /// <summary>
    /// 幂等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Idempotent {
      get { return idempotent_; }
      set {
        idempotent_ = value;
      }
    }

    /// <summary>Field number for the "ToNode" field.</summary>
    public const int ToNodeFieldNumber = 5;
    private string toNode_ = "";
    /// <summary>
    /// 客户端代入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToNode {
      get { return toNode_; }
      set {
        toNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MountID" field.</summary>
    public const int MountIDFieldNumber = 6;
    private string mountID_ = "";
    /// <summary>
    /// 网关代入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MountID {
      get { return mountID_; }
      set {
        mountID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserAddress" field.</summary>
    public const int UserAddressFieldNumber = 7;
    private string userAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAddress {
      get { return userAddress_; }
      set {
        userAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 8;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "FromServiceID" field.</summary>
    public const int FromServiceIDFieldNumber = 9;
    private string fromServiceID_ = "";
    /// <summary>
    /// 节点代入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromServiceID {
      get { return fromServiceID_; }
      set {
        fromServiceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToUsers" field.</summary>
    public const int ToUsersFieldNumber = 10;
    private static readonly pb::FieldCodec<long> _repeated_toUsers_codec
        = pb::FieldCodec.ForInt64(82);
    private readonly pbc::RepeatedField<long> toUsers_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ToUsers {
      get { return toUsers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Package);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Package other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PID != other.PID) return false;
      if (MID != other.MID) return false;
      if (Data != other.Data) return false;
      if (Idempotent != other.Idempotent) return false;
      if (ToNode != other.ToNode) return false;
      if (MountID != other.MountID) return false;
      if (UserAddress != other.UserAddress) return false;
      if (UserID != other.UserID) return false;
      if (FromServiceID != other.FromServiceID) return false;
      if(!toUsers_.Equals(other.toUsers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PID != 0) hash ^= PID.GetHashCode();
      if (MID != 0) hash ^= MID.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Idempotent != 0L) hash ^= Idempotent.GetHashCode();
      if (ToNode.Length != 0) hash ^= ToNode.GetHashCode();
      if (MountID.Length != 0) hash ^= MountID.GetHashCode();
      if (UserAddress.Length != 0) hash ^= UserAddress.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (FromServiceID.Length != 0) hash ^= FromServiceID.GetHashCode();
      hash ^= toUsers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PID);
      }
      if (MID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MID);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (Idempotent != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Idempotent);
      }
      if (ToNode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ToNode);
      }
      if (MountID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MountID);
      }
      if (UserAddress.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserAddress);
      }
      if (UserID != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(UserID);
      }
      if (FromServiceID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FromServiceID);
      }
      toUsers_.WriteTo(output, _repeated_toUsers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PID);
      }
      if (MID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MID);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (Idempotent != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Idempotent);
      }
      if (ToNode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ToNode);
      }
      if (MountID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MountID);
      }
      if (UserAddress.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserAddress);
      }
      if (UserID != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(UserID);
      }
      if (FromServiceID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FromServiceID);
      }
      toUsers_.WriteTo(ref output, _repeated_toUsers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PID);
      }
      if (MID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MID);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Idempotent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Idempotent);
      }
      if (ToNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToNode);
      }
      if (MountID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MountID);
      }
      if (UserAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAddress);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (FromServiceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromServiceID);
      }
      size += toUsers_.CalculateSize(_repeated_toUsers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Package other) {
      if (other == null) {
        return;
      }
      if (other.PID != 0) {
        PID = other.PID;
      }
      if (other.MID != 0) {
        MID = other.MID;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Idempotent != 0L) {
        Idempotent = other.Idempotent;
      }
      if (other.ToNode.Length != 0) {
        ToNode = other.ToNode;
      }
      if (other.MountID.Length != 0) {
        MountID = other.MountID;
      }
      if (other.UserAddress.Length != 0) {
        UserAddress = other.UserAddress;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.FromServiceID.Length != 0) {
        FromServiceID = other.FromServiceID;
      }
      toUsers_.Add(other.toUsers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PID = input.ReadInt32();
            break;
          }
          case 16: {
            MID = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 32: {
            Idempotent = input.ReadInt64();
            break;
          }
          case 42: {
            ToNode = input.ReadString();
            break;
          }
          case 50: {
            MountID = input.ReadString();
            break;
          }
          case 58: {
            UserAddress = input.ReadString();
            break;
          }
          case 64: {
            UserID = input.ReadInt64();
            break;
          }
          case 74: {
            FromServiceID = input.ReadString();
            break;
          }
          case 82:
          case 80: {
            toUsers_.AddEntriesFrom(input, _repeated_toUsers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PID = input.ReadInt32();
            break;
          }
          case 16: {
            MID = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 32: {
            Idempotent = input.ReadInt64();
            break;
          }
          case 42: {
            ToNode = input.ReadString();
            break;
          }
          case 50: {
            MountID = input.ReadString();
            break;
          }
          case 58: {
            UserAddress = input.ReadString();
            break;
          }
          case 64: {
            UserID = input.ReadInt64();
            break;
          }
          case 74: {
            FromServiceID = input.ReadString();
            break;
          }
          case 82:
          case 80: {
            toUsers_.AddEntriesFrom(ref input, _repeated_toUsers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
