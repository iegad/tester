// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: package.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace pb {

  /// <summary>Holder for reflection information generated from package.proto</summary>
  public static partial class PackageReflection {

    #region Descriptor
    /// <summary>File descriptor for package.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PackageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1wYWNrYWdlLnByb3RvEgRiYXNlIqwBCgdQYWNrYWdlEgsKA1BJRBgBIAEo",
            "BRILCgNNSUQYAiABKAUSDAoERGF0YRgDIAEoDBISCgpJZGVtcG90ZW50GAQg",
            "ASgDEg8KB1N1bUNvZGUYBSABKAUSEgoKVG9Ob2RlQWRkchgGIAEoCRIVCg1G",
            "cm9tTW91bnRBZGRyGAcgASgJEhQKDEZyb21Vc2VyQWRkchgIIAEoCRITCgtU",
            "b1VzZXJBZGRycxgJIAMoCSo8CglQYWNrYWdlSUQSFQoRUGFja2FnZUlEX0lu",
            "dmFsaWQQABIYChRQYWNrYWdlSURfSWRlbXBvdGVudBABQgpaAy9wYqoCAnBi",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::pb.PackageID), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::pb.Package), global::pb.Package.Parser, new[]{ "PID", "MID", "Data", "Idempotent", "SumCode", "ToNodeAddr", "FromMountAddr", "FromUserAddr", "ToUserAddrs" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 基础包ID, 0 ~ 100
  /// </summary>
  public enum PackageID {
    [pbr::OriginalName("PackageID_Invalid")] Invalid = 0,
    [pbr::OriginalName("PackageID_Idempotent")] Idempotent = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Package : pb::IMessage<Package>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Package> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::pb.PackageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package(Package other) : this() {
      pID_ = other.pID_;
      mID_ = other.mID_;
      data_ = other.data_;
      idempotent_ = other.idempotent_;
      sumCode_ = other.sumCode_;
      toNodeAddr_ = other.toNodeAddr_;
      fromMountAddr_ = other.fromMountAddr_;
      fromUserAddr_ = other.fromUserAddr_;
      toUserAddrs_ = other.toUserAddrs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package Clone() {
      return new Package(this);
    }

    /// <summary>Field number for the "PID" field.</summary>
    public const int PIDFieldNumber = 1;
    private int pID_;
    /// <summary>
    /// 包ID, 由cerberus解析
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PID {
      get { return pID_; }
      set {
        pID_ = value;
      }
    }

    /// <summary>Field number for the "MID" field.</summary>
    public const int MIDFieldNumber = 2;
    private int mID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MID {
      get { return mID_; }
      set {
        mID_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// 消息数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Idempotent" field.</summary>
    public const int IdempotentFieldNumber = 4;
    private long idempotent_;
    /// <summary>
    /// 幂等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Idempotent {
      get { return idempotent_; }
      set {
        idempotent_ = value;
      }
    }

    /// <summary>Field number for the "SumCode" field.</summary>
    public const int SumCodeFieldNumber = 5;
    private int sumCode_;
    /// <summary>
    /// 校验和
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SumCode {
      get { return sumCode_; }
      set {
        sumCode_ = value;
      }
    }

    /// <summary>Field number for the "ToNodeAddr" field.</summary>
    public const int ToNodeAddrFieldNumber = 6;
    private string toNodeAddr_ = "";
    /// <summary>
    /// 客户端代入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToNodeAddr {
      get { return toNodeAddr_; }
      set {
        toNodeAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FromMountAddr" field.</summary>
    public const int FromMountAddrFieldNumber = 7;
    private string fromMountAddr_ = "";
    /// <summary>
    /// 网关代入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromMountAddr {
      get { return fromMountAddr_; }
      set {
        fromMountAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FromUserAddr" field.</summary>
    public const int FromUserAddrFieldNumber = 8;
    private string fromUserAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromUserAddr {
      get { return fromUserAddr_; }
      set {
        fromUserAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToUserAddrs" field.</summary>
    public const int ToUserAddrsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_toUserAddrs_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> toUserAddrs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 节点代入
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ToUserAddrs {
      get { return toUserAddrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Package);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Package other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PID != other.PID) return false;
      if (MID != other.MID) return false;
      if (Data != other.Data) return false;
      if (Idempotent != other.Idempotent) return false;
      if (SumCode != other.SumCode) return false;
      if (ToNodeAddr != other.ToNodeAddr) return false;
      if (FromMountAddr != other.FromMountAddr) return false;
      if (FromUserAddr != other.FromUserAddr) return false;
      if(!toUserAddrs_.Equals(other.toUserAddrs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PID != 0) hash ^= PID.GetHashCode();
      if (MID != 0) hash ^= MID.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Idempotent != 0L) hash ^= Idempotent.GetHashCode();
      if (SumCode != 0) hash ^= SumCode.GetHashCode();
      if (ToNodeAddr.Length != 0) hash ^= ToNodeAddr.GetHashCode();
      if (FromMountAddr.Length != 0) hash ^= FromMountAddr.GetHashCode();
      if (FromUserAddr.Length != 0) hash ^= FromUserAddr.GetHashCode();
      hash ^= toUserAddrs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PID);
      }
      if (MID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MID);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (Idempotent != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Idempotent);
      }
      if (SumCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SumCode);
      }
      if (ToNodeAddr.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ToNodeAddr);
      }
      if (FromMountAddr.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FromMountAddr);
      }
      if (FromUserAddr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FromUserAddr);
      }
      toUserAddrs_.WriteTo(output, _repeated_toUserAddrs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PID);
      }
      if (MID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MID);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (Idempotent != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Idempotent);
      }
      if (SumCode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SumCode);
      }
      if (ToNodeAddr.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ToNodeAddr);
      }
      if (FromMountAddr.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FromMountAddr);
      }
      if (FromUserAddr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FromUserAddr);
      }
      toUserAddrs_.WriteTo(ref output, _repeated_toUserAddrs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PID);
      }
      if (MID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MID);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Idempotent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Idempotent);
      }
      if (SumCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SumCode);
      }
      if (ToNodeAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToNodeAddr);
      }
      if (FromMountAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromMountAddr);
      }
      if (FromUserAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromUserAddr);
      }
      size += toUserAddrs_.CalculateSize(_repeated_toUserAddrs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Package other) {
      if (other == null) {
        return;
      }
      if (other.PID != 0) {
        PID = other.PID;
      }
      if (other.MID != 0) {
        MID = other.MID;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Idempotent != 0L) {
        Idempotent = other.Idempotent;
      }
      if (other.SumCode != 0) {
        SumCode = other.SumCode;
      }
      if (other.ToNodeAddr.Length != 0) {
        ToNodeAddr = other.ToNodeAddr;
      }
      if (other.FromMountAddr.Length != 0) {
        FromMountAddr = other.FromMountAddr;
      }
      if (other.FromUserAddr.Length != 0) {
        FromUserAddr = other.FromUserAddr;
      }
      toUserAddrs_.Add(other.toUserAddrs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PID = input.ReadInt32();
            break;
          }
          case 16: {
            MID = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 32: {
            Idempotent = input.ReadInt64();
            break;
          }
          case 40: {
            SumCode = input.ReadInt32();
            break;
          }
          case 50: {
            ToNodeAddr = input.ReadString();
            break;
          }
          case 58: {
            FromMountAddr = input.ReadString();
            break;
          }
          case 66: {
            FromUserAddr = input.ReadString();
            break;
          }
          case 74: {
            toUserAddrs_.AddEntriesFrom(input, _repeated_toUserAddrs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PID = input.ReadInt32();
            break;
          }
          case 16: {
            MID = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 32: {
            Idempotent = input.ReadInt64();
            break;
          }
          case 40: {
            SumCode = input.ReadInt32();
            break;
          }
          case 50: {
            ToNodeAddr = input.ReadString();
            break;
          }
          case 58: {
            FromMountAddr = input.ReadString();
            break;
          }
          case 66: {
            FromUserAddr = input.ReadString();
            break;
          }
          case 74: {
            toUserAddrs_.AddEntriesFrom(ref input, _repeated_toUserAddrs_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
